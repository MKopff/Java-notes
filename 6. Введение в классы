Класс - это шаблон для создания объекта (логический каркас, определяющий взаимосвязь между его членами), а
Объект - это экземпляр класса (т.е. физический объект, занимающий место в оперативной памяти).

Класс определяет новый тип данных. Как только новый тип определён, им можно пользоваться. 

Определение класса:
    class имя_класса {
        тип переменная_экземпляра; // и т.д., пока не перечислят все переменные экземпляра
        
        тип имя_метода(список параметров) { // и т.д., пока не перечислят все используемые методы
            // тело метода
        }
    }

В большинстве клас­сов действия над переменными зкземпляра и доступ к ним осуществляют методы,
определенные в этом классе. Таким образом, именно методы, как правило, опреде­ляют порядок использования данных класса.

(!!!) Каждый экземпляр класса содержит собственные копии переменных экземпляра (класса). Таким образом, данные
одного объекта отделены и отличаются от данных другого объекта.

Метод main() обязательно указывать только в тех случаях, когда он является отправной точкой запуска программ.
Часто его необязательно использовать. + Многие прикладные программы не содержат его вовсе.

Box mybox = new Box(); // создать объект mybox класса Box

Для доступа к перемееным и методам класса внутри объекта используют операцию-точку (.) // e.g. mybox.width = 100; 

(!) Файлу программы всегда присваивают имя того класса, в котором содержится метод main().

(!) При компиляции компилятор автоматически создаёт отдельные файлы для каждого класса. 
Т.о. необязательно прописывать все классы в одном файле.


                Объявление объектов.

Проходит в 2 этапа:
    1) объявляется переменная типа класса, которая может ссылаться на объект (но ещё не определяет объект)
    2) получают физическую копию объекта и присваивают её этой переменной. 

    Box mybox; // объявляют ссылку на объект.
    mybox = new Box; // выделяют память на объект Box. 
    
Операция new динамически (т.е. вовремя выполнения) резервирует оперативную память для объекта и возвращает ссылку на него.
В общих чертах эта ссылка представляет собой адрес объекта в памяти, зарезервированной операцией new.Затем эта ссылка
сохраняется в переменной. Таким образом, оперативная память должна динамически выделяться для объектов всех классов в Java.

*Возможны случаи, когда операция new не в состоянии выделить оперативную память (из-за её ограниченности). 
Тогда возникает исключение времени выполнения.

переменная_класса = new имя_класса(); // создание объекта.
Имя класса, за которым следуют круглые скобки, обозначает конструктор данно­го класса. Конструктор определяет действия, 
выполняемые при создании объекта класса. Путой конструктор выполняет действия по умолчанию.

Помните! Присваивание одной переменной ссылки на объект другой приводит к созданию только
копии ссылки на объект, а не копии самого объекта.

!!! в правильно написанных программах на Java доступ к переменным экземпляра
должен осуществляться только через методы, определенные в их классе.



                            Введение в матоды.
        По сути, всё взаимодействие с классом происходит через его методы.
        
    Лбъявление метода:
Тип имя(список параметров) { // тип: примитивный, строковый, тип созданного класса или void, если метод ничего не возвращает.
    // тело метода
}

Когда доступ к переменной экземпляра осуществля­ется из кода, не входящего в класс, где определена переменная экземпляра, 
следует непременно указать объект с помощью операции-точки. Но когда такой доступ осуществляется из кода, входящего в класс,
где определена переменная экземпля­ра, ссылка на переменную может делаться непосредственно. 
        Эти же правила от­носятся и к методам.

• Тип данных, возвращаемых методом, должен быть совместим с возвраща­емым типом, указанным в методе. Так, если какой-нибудь 
метод должен возвращать логический тип boolean,то возвратить из него целочисленное значение нельзя.
• Переменная, принимающая возвращаемое методом значение,также должна быть совместима с возвращаемым типом, указанным для метода.


                                    Конструкторы.

            Они не имеют возвраща­емого типа - даже типа void. // т.к. являются их тип (задан неявно)- это тип их класса.

Если конструктор класса не определен явно, то в Java для класса создается конструктор по умолчанию 
(устанавливает нулевые, null и false значения в соответсвующие переменные).

Когда имя локальной переменной совпадает с именем переменной экзем­пляра, локальная переменная скрывает переменную экземпляра.
Для устранения этого конфликта существует ключевое слово "this"- для обращения к переменным экземпляра по этим же именам.

//В этом коде разрешаются конфликты 

Box(douЫe width, douЫe height, douЫe depth){
this.width= width;
this.height = height;
this.depth = depth;
}

            Сборка "мусора".
Т.к. память выделяется динамически с помощью операции new, то объект считается не нужным, когда в программе больше нет никаких
ссылок на этот объект. Хотя сборка муссора не всегда проиходит во время выполнения программ. За неё париться не надо.


    


